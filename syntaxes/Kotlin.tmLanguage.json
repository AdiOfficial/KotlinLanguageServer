{
	"name": "Kotlin",
	"scopeName": "source.kotlin",
	"patterns": [
		{
			"include": "#import"
		},
		{
			"include": "#package"
		},
		{
			"include": "#code"
		}
	],
	"repository": {
		"import": {
			"begin": "\\b(import)\\b\\s*",
			"beginCaptures": {
				"1": {
					"name": "storage.type.import.kotlin"
				}
			},
			"end": ";|$",
			"name": "meta.import.kotlin",
			"contentName": "entity.name.package.kotlin",
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"match": "(?<=\\.)\\s*\\.|\\.(?=\\s*;)",
					"name": "invalid.illegal.character_not_allowed_here.kotlin"
				},
				{
					"match": "(?<!\\.)\\s*\\*",
					"name": "invalid.illegal.character_not_allowed_here.kotlin"
				},
				{
					"match": "(?<!_)_(?=\\s*(\\.|;))|\\b\\d+|-+",
					"name": "invalid.illegal.character_not_allowed_here.kotlin"
				},
				{
					"match": "(?x)\\b(?<!\\$)\n(abstract|assert|boolean|break|byte|case|catch|char|class|\nconst|continue|default|do|double|else|enum|extends|final|\nfinally|float|for|goto|if|implements|import|instanceof|int|\ninterface|long|native|new|package|private|protected|public|\nreturn|short|static|strictfp|super|switch|syncronized|this|\nthrow|throws|transient|try|void|volatile|while|\ntrue|false|null)\\b",
					"name": "invalid.illegal.character_not_allowed_here.kotlin"
				},
				{
					"match": "\\*",
					"name": "variable.language.wildcard.kotlin"
				}
			]
		},
		"package": {
			"begin": "\\b(package)\\b\\s*",
			"beginCaptures": {
				"1": {
					"name": "storage.type.package.kotlin"
				}
			},
			"end": ";|$",
			"name": "meta.package.kotlin",
			"contentName": "entity.name.package.kotlin",
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"match": "(?<=\\.)\\s*\\.|\\.(?=\\s*;)",
					"name": "invalid.illegal.character_not_allowed_here.kotlin"
				},
				{
					"match": "(?<!_)_(?=\\s*(\\.|;))|\\b\\d+|-+",
					"name": "invalid.illegal.character_not_allowed_here.kotlin"
				},
				{
					"match": "(?x)\\b(?<!\\$)\n(abstract|assert|boolean|break|byte|case|catch|char|class|\nconst|continue|default|do|double|else|enum|extends|final|\nfinally|float|for|goto|if|implements|import|instanceof|int|\ninterface|long|native|new|package|private|protected|public|\nreturn|short|static|strictfp|super|switch|syncronized|this|\nthrow|throws|transient|try|void|volatile|while|\ntrue|false|null)\\b",
					"name": "invalid.illegal.character_not_allowed_here.kotlin"
				}
			]
		},
		"code": {
			"patterns": [
				{
					"include": "#annotation-simple"
				},
				{
					"include": "#annotation-site-list"
				},
				{
					"include": "#annotation-site"
				},
				{
					"include": "#class-declaration-simple"
				},
				{
					"include": "#class-declaration-generic"
				},
				{
					"include": "#where-declaration"
				},
				{
					"include": "#type-alias"
				},
				{
					"include": "#object-declaration"
				},
				{
					"include": "#function-declaration"
				},
				{
					"include": "#variable-declaration"
				},
				{
					"include": "#type-constraint"
				},
				{
					"include": "#type-annotation"
				},
				{
					"include": "#method-call"
				},
				{
					"include": "#function-call"
				},
				{
					"include": "#method-reference"
				},
				{
					"include": "#property-reference"
				},
				{
					"include": "#key"
				},
				{
					"include": "#string"
				},
				{
					"include": "#string-empty"
				},
				{
					"include": "#string-multiline"
				},
				{
					"include": "#modifiers"
				},
				{
					"include": "#variable-reference"
				},
				{
					"include": "#type-reference"
				}
			]
		},
		"annotation-simple": {
			"match": "@[\\w\\.]+\\b(?!:)",
			"name": "entity.name.type.annotation.kotlin"
		},
		"annotation-site-list": {
			"begin": "(@\\w+):\\s*\\[",
			"end": "\\]",
			"beginCaptures": {
				"1": {
					"name": "entity.name.type.annotation-site.kotlin"
				}
			},
			"patterns": [
				{
					"include": "#unescaped-annotation"
				}
			]
		},
		"annotation-site": {
			"begin": "(@\\w+):\\s*(?!\\[)",
			"end": "$",
			"beginCaptures": {
				"1": {
					"name": "entity.name.type.annotation-site.kotlin"
				}
			},
			"patterns": [
				{
					"include": "#unescaped-annotation"
				}
			]
		},
		"unescaped-annotation": {
			"match": "\\b[\\w\\.]+\\b",
			"name": "entity.name.type.annotation.kotlin"
		},
		"class-declaration-simple": {
			"match": "\\b(class|interface)\\s+(\\w+)\\b(?!<)",
			"captures": {
				"1": {
					"name": "storage.type.class.kotlin"
				},
				"2": {
					"name": "entity.name.type.class.kotlin"
				}
			}
		},
		"class-declaration-generic": {
			"begin": "\\b(class|interface)\\s+(\\w+)<",
			"end": ">",
			"captures": {
				"1": {
					"name": "storage.type.class.kotlin"
				},
				"2": {
					"name": "entity.name.type.class.kotlin"
				}
			},
			"patterns": [
				{
					"include": "#type-parameter"
				},
				{
					"include": "#type-annotation"
				},
				{
					"match": "\\b\\w+\\b",
					"name": "entity.name.type.kotlin"
				}
			]
		},
		"where-declaration": {
			"match": "\\bwhere\\b",
			"name": "storage.modifier.where.kotlin"
		},
		"type-alias": {
			"begin": "\\b(typealias)\\s+",
			"end": "=",
			"beginCaptures": {
				"1": {
					"name": "storage.type.alias.kotlin"
				}
			},
			"patterns": [
				{
					"include": "#type-parameters"
				},
				{
					"match": "\\b\\w+\\b",
					"name": "entity.name.type.kotlin"
				}
			]
		},
		"object-declaration": {
			"match": "\\b(object)\\s+(\\w+)\\b",
			"captures": {
				"1": {
					"name": "storage.type.object.kotlin"
				},
				"2": {
					"name": "entity.name.type.object.kotlin"
				}
			}
		},
		"function-declaration": {
			"begin": "\\b(fun)\\b",
			"end": "\\(",
			"beginCaptures": {
				"1": {
					"name": "storage.type.function.kotlin"
				}
			},
			"patterns": [
				{
					"include": "#type-parameters"
				},
				{
					"match": "\\b\\w+\\b",
					"name": "entity.name.function.kotlin"
				}
			]
		},
		"variable-declaration": {
			"begin": "\\b(val|var)\\b",
			"end": "=",
			"beginCaptures": {
				"1": {
					"name": "storage.type.variable.kotlin"
				}
			},
			"patterns": [
				{
					"include": "#type-annotation"
				},
				{
					"match": "\\b\\w+\\b",
					"name": "variable.kotlin"
				}
			]
		},
		"type-parameters": {
			"begin": "<",
			"end": ">",
			"patterns": [
				{
					"include": "#type-parameter"
				}
			]
		},
		"type-parameter": {
			"patterns": [
				{
					"match": "\\b[A-Z]\\w*\\b",
					"name": "entity.name.type.parameter.kotlin"
				},
				{
					"match": "\\b(in|out)\\b",
					"name": "storage.modifier.kotlin"
				}
			]
		},
		"type-annotation": {
			"patterns": [
				{
					"include": "#type-annotation-simple"
				},
				{
					"include": "#type-annotation-generic"
				}
			]
		},
		"type-annotation-simple": {
			"match": "(?<!:):\\s*([\\w\\.]+)\\b(?!<)",
			"captures": {
				"1": {
					"name": "entity.name.type.kotlin"
				}
			}
		},
		"type-annotation-generic": {
			"begin": "(?<!:):\\s*([\\w\\.]+)<",
			"end": ">",
			"beginCaptures": {
				"1": {
					"name": "entity.name.type.kotlin"
				}
			},
			"patterns": [
				{
					"include": "#type-parameter"
				}
			]
		},
		"method-call": {
			"match": "\\??\\.(\\w+)\\b\\s*(?=\\(|\\{)",
			"captures": {
				"1": {
					"name": "entity.name.function.kotlin"
				}
			}
		},
		"function-call": {
			"match": "(?<!\\?|\\.)(\\w+)\\b\\s*(?=\\(|\\{)",
			"captures": {
				"1": {
					"name": "entity.name.function.kotlin"
				}
			}
		},
		"method-reference": {
			"match": "\\??::(\\w+)\\b",
			"captures": {
				"1": {
					"name": "entity.name.function.kotlin"
				}
			}
		},
		"property-reference": {
			"match": "\\??\\.(\\w+)\\b",
			"captures": {
				"1": {
					"name": "variable.other.property.kotlin"
				}
			}
		},
		"key": {
			"match": "\\b(\\w*)\\s*(=)",
			"captures": {
				"1": {
					"name": "variable.parameter.kotlin"
				},
				"2": {
					"name": "keyword.operator.assignment.kotlin"
				}
			}
		},
		"string-empty": {
			"match": "(?<!\")\"\"(?!\")",
			"name": "string.quoted.double.kotlin"
		},
		"string": {
			"begin": "(?<!\")\"(?!\")",
			"end": "\"",
			"name": "string.quoted.double.kotlin",
			"patterns": [
				{
					"match": "\\.",
					"name": "constant.character.escape.kotlin"
				},
				{
					"include": "#string-escape-simple"
				},
				{
					"include": "#string-escape-bracketed"
				}
			]
		},
		"string-multiline": {
			"begin": "\"\"\"",
			"end": "\"\"\"",
			"name": "string.quoted.double.kotlin",
			"patterns": [
				{
					"match": "\\.",
					"name": "constant.character.escape.kotlin"
				},
				{
					"include": "#string-escape-simple"
				},
				{
					"include": "#string-escape-bracketed"
				}
			]
		},
		"string-escape-simple": {
			"match": "(?<!\\\\)\\$\\w+\\b",
			"name": "variable.kotlin"
		},
		"string-escape-bracketed": {
			"begin": "(?<!\\\\)(\\$\\{)",
			"end": "(\\})",
			"name": "meta.template.expression.kotlin",
			"beginCaptures": {
				"1": "punctuation.definition.template-expression.begin"
			},
			"endCaptures": {
				"1": "punctuation.definition.template-expression.begin"
			},
			"patterns": [
				{
					"include": "#code"
				}
			]
		},
		"modifiers": {
			"match": "abstract|final|enum|open|annotation|sealed|data|override|open|final|abstract|lateinit|private|protected|public|internal|noinline|crossinline|vararg|reified|tailrec|operator|infix|inline|external|const|suspend",
			"name": "storage.modifier.other.kotlin"
		},
		"variable-reference": {
			"match": "\\b([a-z]\\w*)\\b",
			"captures": {
				"1": {
					"name": "variable.unknown.kotlin"
				}
			}
		},
		"type-reference": {
			"match": "\\b([A-Z]\\w*)\\b",
			"captures": {
				"1": {
					"name": "entity.name.type.unknown.kotlin"
				}
			}
		}
	}
}